#!/bin/bash

#############################################
# creat prod build
#############################################
ng build --prod

#############################################
# clean-up: remove files from previous build
#############################################
./ng_clean

#############################################
# move new files to root
#############################################
# copy all from /imdbprime/u to /imdbprime
# The -a option is an improved recursive option, that preserve all file attributes, and also preserve symlinks.
# The . at end of the source path is a specific cp syntax that allow to copy all files and folders, included hidden ones.
cp -a ../u/. ../

#############################################
# adjust appcach.manifest
#############################################
myFile="appcache.manifest"
echo "CACHE MANIFEST" > $myFile
echo "#v0.5 from 13.08.2017" >> $myFile
echo "# see https://www.catswhocode.com/blog/how-to-create-offline-html5-web-apps-in-5-easy-steps" >> $myFile
echo "# https://www.html5rocks.com/de/tutorials/appcache/beginner/" >> $myFile

echo "CACHE:" >> $myFile
echo "#what to cache in application cache" >> $myFile
echo "#index.html -> not necessary, as all html files with "manifest" in them are cached anyway" >> $myFile
echo "#we have some kind of lazy loading if we leave it out here" >> $myFile

# add file names
ls ../u >> $myFile

echo " " >> $myFile
echo "NETWORK:" >> $myFile
echo "#what to NOT cache if network is online" >> $myFile
echo "#star means, load everything if network is online" >> $myFile
echo "#star is only allowed for online!" >> $myFile
echo "*" >> $myFile
echo " " >> $myFile
echo "FALLBACK" >> $myFile
echo "#just an example how to use: if the ressource /api is offline then the cached" >> $myFile
echo "ressource offline.html shall be used" >> $myFile
echo "/api offline.html" >> $myFile


#############################################
# commit and push
#############################################
./ng_commit_and_push
